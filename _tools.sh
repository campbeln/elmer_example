#!/bin/bash
##################################################
#
#           ** DO NOT EDIT THIS FILE **
#
##################################################
# Version: 2023-02-08

# Loop through arguments and process them
#     See: https://pretzelhands.com/posts/command-line-flags/ also https://www.baeldung.com/linux/use-command-line-arguments-in-bash-script
for arg in "$@"
do
    case $arg in
        -p=*|--port=*)
        flagPort="${arg#*=}"
        shift # Remove --port= from processing
        ;;
        -a|--all)
        flagSync=1
        flagRebuild=1
        flagLogs=1
        shift # Remove --rebuild from processing
        ;;
        -s|--sync)
        flagSync=1
        shift # Remove --sync from processing
        ;;
        -r|--rebuild)
        flagRebuild=1
        shift # Remove --rebuild from processing
        ;;
        -l|--logs)
        flagLogs=1
        shift # Remove --logs from processing
        ;;
        -n|--network)
        flagNetwork=1
        shift # Remove --network from processing
        ;;
        -t|--test)
        flagTest=1
        shift # Remove --test from processing
        ;;
        #-x|--xxx)
        #flagXXX="$2"
        #shift # Remove argument name from processing
        #shift # Remove argument value from processing
        #;;
        *)
        flagOthers+=("$1")
        shift # Remove generic argument from processing
        ;;
    esac
done


#
for keyval in  $(grep -E '": [^\{]' ./app/config/base.json | sed -e 's/: /=/' -e "s/\(\,\)$//"); do
    echo 'export ' $keyval && eval export $keyval
    echo $keyval | sed 's/"//g' >> ./docker.env
done;


# Sync
if [[ $flagSync == 1 ]];
then
    cp ../elmer/app/routes/_routes.js ./app/routes/
    cp ../elmer/app/_app.js ./app/
    cp ../elmer/_index.js .
    cp ../elmer/_tools.sh .
    rm _rebuilddocker.sh
    rm _syncElmerBase.sh
    rm _logs.sh
    cp -R ../elmer/libs/ish ./libs/

    npm update
    npm install
    npm audit fix --force
fi


# Rebuild
if [[ $flagRebuild == 1 ]];
then
    docker network create api
    docker ps -a | grep $dockerBaseName/$name | awk '{ system("docker container stop " $1) }'
    docker build . -t $dockerBaseName/$name
    if [[ $baseElmer == "true" ]];
    then
        docker run --net=$net --hostname $name.$hostname -p $portLocal:$port -d $dockerBaseName/$name
    else
        docker run --dns $dns1 --dns $dns2 --net=$net --hostname $name.$hostname -p $portLocal:$port -d $dockerBaseName/$name
    fi

    # sleep 3
    # curl -X GET http://localhost:$portLocal/

    echo "####################"
    echo "# Container Start:"
    echo "####################"

    # Force the $flagLogs below
    flagLogs=1
fi


# Log
if [[ $flagLogs == 1 ]];
then
    docker ps -a | grep $dockerBaseName/$name | awk '{ system("docker container logs " $1) }'
fi


# Network
if [[ $flagNetwork == 1 ]];
then
    docker network inspect api
fi


# Test
if [[ $flagTest == 1 ]];
then
    echo "Test successful; $flagOthers"
fi


# Remove the Docker environment file
sleep 1
rm ./docker.env
